import React, { useEffect, useState } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faDollarSign,
  faBatteryFull,
  faLocationDot,
  faUsers,
  faWrench,
  faCalendar,
  faClock,
  faDownload,
} from "@fortawesome/free-solid-svg-icons";
import styles from "./Batteries.module.css";

function Batteries() {
  const [batteryData, setBatteryData] = useState(null);
  const [loading, setLoading] = useState(true);

  // üîπ Gi·∫£ l·∫≠p d·ªØ li·ªáu mock (sau n√†y c√≥ th·ªÉ thay b·∫±ng API th·∫≠t)
  useEffect(() => {
    setTimeout(() => {
      const mockData = {
        topKpi: [
          {
            title: "T·ªïng Doanh Thu",
            value: "$267.000",
            sub: "+12.5%",
            color: "#16a34a",
            icon: faDollarSign,
          },
          {
            title: "T·ªïng L·∫ßn Thay Pin",
            value: "12.847",
            sub: "+8.3%",
            color: "#3b82f6",
            icon: faBatteryFull,
          },
          {
            title: "Tr·∫°m Ho·∫°t ƒê·ªông",
            value: "24",
            sub: "T·∫•t c·∫£ tr·ª±c tuy·∫øn",
            color: "#a855f7",
            icon: faLocationDot,
          },
          {
            title: "Kh√°ch H√†ng",
            value: "8.547",
            sub: "+156 m·ªõi",
            color: "#f97316",
            icon: faUsers,
          },
        ],
        fleet: {
          totalBatteries: 263,
          healthy: 145,
          degraded: 87,
          critical: 31,
        },
        allocation: [
          { station: "Tr·∫°m Trung T√¢m", used: 17, total: 20 },
          { station: "Tr·∫°m Th∆∞∆°ng M·∫°i", used: 10, total: 15 },
          { station: "Tr·∫°m S√¢n Bay", used: 10, total: 25 },
        ],
      };
      setBatteryData(mockData);
      setLoading(false);
    }, 800);
  }, []);

  if (loading) return <div className={styles.loading}>ƒêang t·∫£i d·ªØ li·ªáu...</div>;

  return (
    <div className={styles.wrapper}>
      {/* KPI ƒë·∫ßu trang */}
      <div className={styles.kpiGrid}>
        {batteryData.topKpi.map((item, index) => (
          <div key={index} className={styles.kpiCard}>
            <div className={styles.kpiInfo}>
              <p className={styles.kpiTitle}>{item.title}</p>
              <h2 className={styles.kpiValue}>{item.value}</h2>
              <p className={styles.kpiSub}>{item.sub}</p>
            </div>
            <div
              className={styles.kpiIcon}
              style={{ color: item.color, backgroundColor: item.color + "20" }}
            >
              <FontAwesomeIcon icon={item.icon} />
            </div>
          </div>
        ))}
      </div>

      {/* Header */}
      <div className={styles.header}>
        <h2 className={styles.title}>Qu·∫£n L√Ω ƒê·ªôi Pin</h2>
        <div className={styles.headerActions}>
          <select className={styles.selectBox}>
            <option>30 ng√†y</option>
            <option>7 ng√†y</option>
            <option>90 ng√†y</option>
          </select>
          <button className={styles.exportBtn}>
            <FontAwesomeIcon icon={faDownload} /> Xu·∫•t D·ªØ Li·ªáu
          </button>
        </div>
      </div>

      {/* Grid 3 card */}
      <div className={styles.cardGrid}>
        {/* 1Ô∏è‚É£ Th·ªëng k√™ ƒë·ªôi pin */}
        <div className={styles.card}>
          <h3>T·ªïng Quan ƒê·ªôi Pin</h3>
          <div className={styles.fleetStats}>
            <p>
              T·ªïng s·ªë pin: <span>{batteryData.fleet.totalBatteries}</span>
            </p>
            <p>
              T√¨nh tr·∫°ng t·ªët (&gt;90%):{" "}
              <span className={styles.green}>{batteryData.fleet.healthy}</span>
            </p>
            <p>
              Suy gi·∫£m (70‚Äì90%):{" "}
              <span className={styles.yellow}>{batteryData.fleet.degraded}</span>
            </p>
            <p>
              Nguy k·ªãch (&lt;70%):{" "}
              <span className={styles.red}>{batteryData.fleet.critical}</span>
            </p>
          </div>
        </div>

        {/* 2Ô∏è‚É£ L·ªãch b·∫£o tr√¨ */}
        <div className={styles.card}>
          <h3>L·ªãch B·∫£o Tr√¨</h3>
          <div className={styles.maintenanceList}>
            <div className={`${styles.maintenanceItem} ${styles.redBg}`}>
              <FontAwesomeIcon icon={faWrench} />
              <div>
                <strong>Kh·∫©n c·∫•p: 8 pin</strong>
                <p>C·∫ßn ki·ªÉm tra ngay l·∫≠p t·ª©c</p>
              </div>
            </div>

            <div className={`${styles.maintenanceItem} ${styles.yellowBg}`}>
              <FontAwesomeIcon icon={faCalendar} />
              <div>
                <strong>Tu·∫ßn n√†y: 15 pin</strong>
                <p>B·∫£o tr√¨ theo k·∫ø ho·∫°ch</p>
              </div>
            </div>

            <div className={`${styles.maintenanceItem} ${styles.blueBg}`}>
              <FontAwesomeIcon icon={faClock} />
              <div>
                <strong>Th√°ng sau: 23 pin</strong>
                <p>Ki·ªÉm tra ƒë·ªãnh k·ª≥</p>
              </div>
            </div>
          </div>
        </div>

        {/* 3Ô∏è‚É£ Ph√¢n b·ªï pin */}
        <div className={styles.card}>
          <h3>Ph√¢n B·ªï Pin</h3>
          <div className={styles.allocationList}>
            {batteryData.allocation.map((st, i) => {
              const percent = Math.round((st.used / st.total) * 100);
              return (
                <div key={i} className={styles.allocationRow}>
                  <span>{st.station}</span>
                  <div className={styles.progressBar}>
                    <div
                      className={styles.progressFill}
                      style={{ width: `${percent}%` }}
                    ></div>
                  </div>
                  <span>
                    {st.used}/{st.total}
                  </span>
                </div>
              );
            })}
          </div>

          <button className={styles.optimizeBtn}>T·ªëi ∆Øu Ph√¢n B·ªï</button>
        </div>
      </div>
    </div>
  );
}

export default Batteries;
